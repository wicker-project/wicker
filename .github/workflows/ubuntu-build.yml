# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  install_build_deps:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Catch2
      - uses: actions/cache@v3.3.2
        id: cache-catch2
        with: 
          path: "/usr/local/include/Catch2"
          key: ${{ runner.os }}-Catch2
      - name: Cache lcov
      - uses: actions/cache@v3.3.2
        id: cache-lcov
        with:
          path: "/usr/bin/lcov"
          key: ${{ runner.os }}-lcov
      - name: Cache doxygen
      - uses: actions/cache@v3.3.2
        id: cache-doxygen
        

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Catch2 from Source
      run: |
        git clone https://github.com/catchorg/Catch2.git
        cd Catch2
        cmake -Bbuild -H. -DBUILD_TESTING=OFF
        sudo cmake --build build/ --target install

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build source
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -DCMAKE_CXX_FLAGS="-g -fprofile-arcs -ftest-coverage"

    - name: Build docs
      run: doxygen

    
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -T Test -T Coverage
      #run: ctest -C ${{env.BUILD_TYPE}}

    - name: Coverage report
      working-directory: ${{github.workspace}}/build
      run: |
        lcov -c --directory . --output-file ./lcov.info
        lcov --remove ./lcov.info -o ./lcov.info '/usr/include/*' '/usr/local/include/*' '/usr/lib/*'
        genhtml ./lcov.info --output-directory coverage

